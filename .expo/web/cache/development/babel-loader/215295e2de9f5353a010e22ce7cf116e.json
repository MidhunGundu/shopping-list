{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useRef } from 'react';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\n\nvar ItemList = function ItemList(props) {\n  return React.createElement(TouchableOpacity, {\n    activeOpacity: 0.6,\n    style: {\n      margin: 10,\n      padding: 8,\n      borderBottomColor: 'grey',\n      borderBottomWidth: 0.5\n    }\n  }, React.createElement(Text, {\n    style: styles.text\n  }, props.item));\n};\n\nexport default function App() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      query = _useState2[0],\n      setQuery = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      items = _useState4[0],\n      setItems = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      searchedItems = _useState6[0],\n      setSearchedItems = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      searchingActive = _useState8[0],\n      setSearchingActive = _useState8[1];\n\n  var scrollRef = useRef();\n  var keyWords = [{\n    \"food\": \"Mango\"\n  }, {\n    \"food\": \"Apple\"\n  }, {\n    \"food\": \"Milk\"\n  }, {\n    \"food\": \"Bread\"\n  }, {\n    \"food\": \"Guava\"\n  }, {\n    \"food\": \"Coffee\"\n  }, {\n    \"food\": \"Oranges\"\n  }, {\n    \"food\": \"Tea\"\n  }, {\n    \"food\": \"Carrot\"\n  }, {\n    \"food\": \"Papaya\"\n  }, {\n    \"food\": \"Cookies\"\n  }, {\n    \"food\": \"Pineapple\"\n  }, {\n    \"food\": \"Sweets\"\n  }, {\n    \"food\": \"Candy\"\n  }, {\n    \"food\": \"Cake\"\n  }, {\n    \"food\": \"Chocolates\"\n  }, {\n    \"food\": \"Burger\"\n  }];\n\n  var handleTextChange = function handleTextChange(txt) {\n    setSearchingActive(true);\n    setQuery(txt);\n    setSearchedItems(items.filter(function (e) {\n      return e.food.toLowerCase().includes(txt.toLowerCase());\n    }));\n\n    if (txt.trim().length == 0) {\n      setSearchingActive(false);\n    }\n  };\n\n  var handleAdd = function handleAdd() {\n    var _scrollRef$current;\n\n    (_scrollRef$current = scrollRef.current) == null ? void 0 : _scrollRef$current.scrollTo({\n      y: 0,\n      x: 0,\n      animated: true\n    });\n    setTimeout(function () {\n      var word = keyWords[Math.floor(Math.random() * keyWords.length)];\n      setItems([].concat(_toConsumableArray(items), [word]));\n\n      var itemsCopy = _toConsumableArray(items);\n\n      itemsCopy.unshift(word);\n      setItems(itemsCopy);\n    }, 200);\n  };\n\n  return React.createElement(SafeAreaView, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: {\n      marginTop: 25,\n      flexDirection: 'row'\n    }\n  }, React.createElement(TextInput, {\n    style: styles.input,\n    onChangeText: function onChangeText(txt) {\n      return handleTextChange(txt);\n    },\n    value: query,\n    placeholder: \"Search\"\n  }), React.createElement(TouchableOpacity, {\n    disabled: searchingActive,\n    onPress: handleAdd,\n    style: styles.addBtn\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 30\n    }\n  }, \"+\"))), React.createElement(View, {\n    style: {\n      height: 2,\n      backgroundColor: '#000',\n      marginHorizontal: 25\n    }\n  }), React.createElement(ScrollView, {\n    ref: scrollRef\n  }, searchingActive ? searchedItems.map(function (val, id) {\n    return React.createElement(ItemList, {\n      key: id,\n      item: val.food\n    });\n  }) : items.map(function (val, id) {\n    return React.createElement(ItemList, {\n      key: id,\n      item: val.food\n    });\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#eee'\n  },\n  input: {\n    height: 50,\n    margin: 20,\n    borderWidth: 1,\n    padding: 10,\n    fontFamily: 'monospace',\n    fontWeight: 'bold',\n    fontSize: 16,\n    width: '75%',\n    borderRadius: 5\n  },\n  addBtn: {\n    width: 50,\n    height: 50,\n    alignSelf: 'center',\n    borderColor: '#121',\n    borderWidth: 1,\n    borderRadius: 5,\n    alignItems: 'center'\n  },\n  text: {\n    fontWeight: 'bold',\n    fontSize: 18,\n    fontFamily: 'sans-serif'\n  }\n});","map":{"version":3,"sources":["C:/Users/Admin/Desktop/demo-app-master/App.js"],"names":["React","useState","useRef","ItemList","props","margin","padding","borderBottomColor","borderBottomWidth","styles","text","item","App","query","setQuery","items","setItems","searchedItems","setSearchedItems","searchingActive","setSearchingActive","scrollRef","keyWords","handleTextChange","txt","filter","e","food","toLowerCase","includes","trim","length","handleAdd","current","scrollTo","y","x","animated","setTimeout","word","Math","floor","random","itemsCopy","unshift","container","marginTop","flexDirection","input","addBtn","fontSize","height","backgroundColor","marginHorizontal","map","val","id","StyleSheet","create","flex","borderWidth","fontFamily","fontWeight","width","borderRadius","alignSelf","borderColor","alignItems"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\nimport { SafeAreaView, ScrollView, StyleSheet, Text, TextInput, TouchableOpacity, View } from 'react-native';\n\n//Components\nconst ItemList = (props) => {\n  return (\n    <TouchableOpacity activeOpacity={0.6} style={{ margin: 10, padding: 8, borderBottomColor: 'grey', borderBottomWidth: 0.5 }}>\n      <Text style={styles.text}>{props.item}</Text>\n    </TouchableOpacity>\n  )\n}\n\n// Default App Return\nexport default function App() {\n\n\n  //state handling varibales/attributes\n  const [query, setQuery] = useState(\"\");\n  const [items, setItems] = useState([]);\n  const [searchedItems, setSearchedItems] = useState([]);\n  const [searchingActive, setSearchingActive] = useState(false);\n\n  //Scroll View Ref for scrollToTop Function\n  const scrollRef = useRef();\n\n  // Keywords for adding random words into the list\n  const keyWords = [\n    { \"food\": \"Mango\" },\n    { \"food\": \"Apple\" },\n    { \"food\": \"Milk\" },\n    { \"food\": \"Bread\" },\n    { \"food\": \"Guava\" },\n    { \"food\": \"Coffee\" },\n    { \"food\": \"Oranges\" }, { \"food\": \"Tea\" },\n    { \"food\": \"Carrot\" },\n    { \"food\": \"Papaya\" },\n    { \"food\": \"Cookies\" },\n    { \"food\": \"Pineapple\" },\n    { \"food\": \"Sweets\" },\n    { \"food\": \"Candy\" },\n    { \"food\": \"Cake\" },\n    { \"food\": \"Chocolates\" },\n    { \"food\": \"Burger\" }\n  ];\n\n  //Handling the search text inputs\n  const handleTextChange = (txt) => {\n    setSearchingActive(true);\n    setQuery(txt);\n\n    //filtering items\n    setSearchedItems(items.filter(e => (\n      e.food.toLowerCase().includes(txt.toLowerCase())\n    )\n    ))\n    if (txt.trim().length == 0) {\n      setSearchingActive(false);\n    }\n    // console.log(txt);\n  }\n\n  const handleAdd = () => {\n\n    // If below then scrollback to top, then add item.\n    scrollRef.current?.scrollTo({\n      y: 0,\n      x: 0,\n      animated: true,\n    });\n\n    // 200ms delay for adding items\n    setTimeout(() => {\n      const word = keyWords[Math.floor(Math.random() * (keyWords.length))];\n      setItems([...items, word]);\n      let itemsCopy = [...items];\n      itemsCopy.unshift(word);\n      setItems(itemsCopy);\n      // console.log(items);\n    }, 200);\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={{ marginTop: 25, flexDirection: 'row' }}>\n        {/* Search Box for text input query */}\n        <TextInput\n          style={styles.input}\n          onChangeText={(txt) => handleTextChange(txt)}\n          value={query}\n          placeholder=\"Search\"\n        />\n        <TouchableOpacity disabled={searchingActive} onPress={handleAdd} style={styles.addBtn}>\n          <Text style={{ fontSize: 30 }}>+</Text>\n        </TouchableOpacity>\n      </View>\n      {/* Bottom Divider */}\n      <View style={{ height: 2, backgroundColor: '#000', marginHorizontal: 25 }} />\n\n      {/* Items Lists */}\n      <ScrollView ref={scrollRef}>\n        {searchingActive ? (searchedItems.map((val, id) => { //Searched Items\n          return (\n            <ItemList key={id} item={val.food} />\n          )\n        })) : (items.map((val, id) => {      //Actual Items\n          return (\n            <ItemList key={id} item={val.food} />\n          )\n        }))}\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#eee',\n  },\n  input: {\n    height: 50,\n    margin: 20,\n    borderWidth: 1,\n    padding: 10,\n    fontFamily: 'monospace',\n    fontWeight: 'bold',\n    fontSize: 16,\n    width: '75%',\n    borderRadius: 5\n  },\n  addBtn: {\n    width: 50,\n    height: 50,\n    alignSelf: 'center',\n    borderColor: '#121',\n    borderWidth: 1,\n    borderRadius: 5,\n    alignItems: 'center',\n  },\n  text: {\n    fontWeight: 'bold',\n    fontSize: 18,\n    fontFamily: 'sans-serif',\n  }\n});\n"]},"metadata":{},"sourceType":"module"}